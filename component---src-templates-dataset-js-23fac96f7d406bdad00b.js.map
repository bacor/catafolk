{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/CardDeck.js","webpack:///./src/components/people.js","webpack:///./src/templates/dataset.js","webpack:///./src/components/tag-list.js"],"names":["createWithBsPrefix","Name","url","children","hasUrl","undefined","href","Person","name","role","options","hasRole","className","PersonList","persons","props","map","person","i","key","length","People","people","textProps","DatasetHeader","dataset","Jumbotron","dataset_id","title","_","startCase","style","maxWidth","description","source","tags","variant","Button","dataset_url","github_directory","License","abbreviation","text","unknown","target","truncate","DatasetPropsCard","bibliography","version","authors","contributors","dataset_citation_keys","format","entry","slice","join","publication_citation_keys","copyright","license","formats","Readme","hasReadme","readme","file","wordCount","words","Card","Header","Body","rawMarkdownBody","bg","Title","Issue","issue","Issues","issues","Sources","opts","data","metadata","site","siteMetadata","github","raw_index_url","index","bibtex","sources","nodes","node","content","Cite","sourceKeys","source_keys","push","hasSources","uniq","citations","forEach","citation","e","console","warn","cited","filter","id","showColumns","show_columns","indexColumns","React","useMemo","Cell","ExpanderCell","Filter","Sort","accessor","RowHeaderCell","width","row","preview_url","source_url","OptionsCell","cell","maxLength","source_key","pageNum","source_page_num","ChecksumCell","indexData","songs","hasIssues","pageName","Container","Row","CardDeck","columns","twoColumns","query","TagPill","pill","TagList","tag"],"mappings":"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","file":"component---src-templates-dataset-js-23fac96f7d406bdad00b.js","sourcesContent":["import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');","import React from \"react\"\n\nfunction Name({url, children}) {\n  const hasUrl = (url !== undefined) & (url !== null)\n  return (\n    <>\n    {hasUrl\n      ? <a href={url}>{children}</a>\n      : <span>{children}</span> \n    }\n    </>\n  );\n}\n\nfunction Person({ name, url, role, ...options}) {\n  const hasRole = (role !== undefined) & (role !== null)\n  return (\n    <span {...options}>\n      <Name url={url}>{name}</Name>\n      { hasRole ? <span className=\"text-muted\"> ({role})</span> : null }\n    </span>\n  )\n}\n\nfunction PersonList({ persons, ...props }) {\n  return (\n    <div {...props}>\n      {persons.map((person, i) => (\n        <span key={person.name}>\n          <Person name={person.name} url={person.url} role={person.role} />\n          { (i < persons.length-1) ? \", \" : null }\n        </span>\n      ))}\n    </div>\n  )\n}\n\nfunction People({ people, textProps, ...props}) {\n  return (\n    typeof(people) == \"string\"\n      ? <span {...textProps} {...props}>{people}</span>\n      : <PersonList persons={people} {...props} />\n  )\n}\n\nexport default People;\nexport {\n  People,\n  PersonList,\n  Person,\n  Name\n}","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport _ from 'lodash'\nimport Cite from 'citation-js';\n\nimport Markdown from 'react-markdown'\nimport {IoIosArrowForward} from \"react-icons/io\";\n\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Card from 'react-bootstrap/Card';\n\nimport Layout from \"../components/layout\"\nimport TagList from \"../components/tag-list\";\nimport People from \"../components/people\";\nimport { PropsCard, Prop } from \"../components/properties\";\n\nimport { \n  ChecksumCell,\n  OptionsCell,\n  TruncatedCell,\n  RowHeaderCell,\n  ExpanderCell,\n  Index,\n} from \"../components/index\";\n\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\n\nimport Bibliography from \"../components/bibliography\"\n\nconst DatasetHeader = ({ dataset }) => {\n  return (\n    <Jumbotron className=\"w-100\" key={`${dataset.dataset_id}-header`}>\n      <div>\n        <h1 className=\"display-4\">{dataset.title || _.startCase(dataset.dataset_id)}</h1>\n        <div className=\"lead\" style={{maxWidth: 700 }}>\n          {dataset.description \n            ? <Markdown source={dataset.description} />\n            : <span className=\"text-muted\">This dataset has no description yet...</span>}\n        </div>\n        <TagList tags={dataset.tags} variant=\"dark\" className=\"mb-4\" />\n        <Button variant=\"dark\" href={dataset.dataset_url} className=\"mr-2\">\n           Go to dataset <IoIosArrowForward />\n         </Button>\n         <Button variant=\"outline-secondary\" href={`${dataset.github_directory}/index.csv`}>\n           View full index <IoIosArrowForward />\n         </Button>\n      </div>\n    </Jumbotron>\n  )\n}\n\nfunction License({ abbreviation, name, url, text, unknown }) {\n  if(unknown) {\n    return <span className=\"text-danger\">Unknown</span>;\n  } else {\n    return (\n      <>\n        <a href={url} target=\"_blank\" className=\"bold\" title={name}>{name}</a>.\n        {text ? <><br /><span>{_.truncate(text, {length: 200})}</span></> : null}\n      </>\n    )\n  }\n\n  return (\n    <a href={url} target=\"_blank\" title={name}>{abbreviation}</a>\n  )\n}\n\nfunction DatasetPropsCard({dataset, bibliography}) {\n  return (\n    <PropsCard title=\"Properties\">\n      <Prop title=\"Dataset ID\" ><code className=\"text-muted\">{dataset.dataset_id}</code></Prop>\n      {dataset.version && (\n        <Prop title=\"Version\"><code className=\"text-muted\">{dataset.version}</code></Prop>)}\n      {dataset.authors && (\n        <Prop title=\"Authors\"><People people={dataset.authors} /></Prop>)}\n\n      {dataset.contributors && (\n        <Prop title=\"Contributors\"><People people={dataset.contributors} /></Prop>)}\n      \n      <Prop title=\"Citation\">\n        {dataset.dataset_citation_keys.map(key => {\n          const citation = bibliography.format('citation', {entry: key})\n          return citation.slice(1, -1)\n        }).join('; ')}\n      </Prop>\n\n      <Prop title=\"Sources\">\n        {dataset.publication_citation_keys.map(key => {\n          const citation = bibliography.format('citation', {entry: key})\n          return citation.slice(1, -1)\n        }).join('; ')}\n      </Prop>\n      \n      {dataset.copyright && (\n        <Prop title=\"Copyright\">\n          <Markdown source={dataset.copyright} />\n        </Prop>)}\n\n      {dataset.license && (\n        <Prop title=\"License\"><License {...dataset.license} /></Prop>)}\n      \n      {dataset.formats && (\n        <Prop title=\"Formats\"><TagList tags={dataset.formats} variant=\"secondary\" /></Prop>)}\n    </PropsCard>\n  );\n}\n\nfunction Technicalities({ dataset }) {\n  return (\n    <PropsCard title=\"Technicalities\">\n      <Prop title=\"Dataset ID\" ><code className=\"text-muted\">{dataset.dataset_id}</code></Prop>\n      {dataset.version && (\n        <Prop title=\"Version\"><code className=\"text-muted\">{dataset.version}</code></Prop>)}\n      <Prop title=\"Checksum\">\n        {dataset.checksum \n          ? <code className=\"text-muted\">{dataset.checksum}</code> \n          : 'Not available'}\n      </Prop>\n      {dataset.formats && (\n        <Prop title=\"Format\"><TagList tags={dataset.formats} variant=\"secondary\" /></Prop>)}\n      <Prop title=\"Songs\">{dataset.files}</Prop>\n    </PropsCard>\n  );\n}\n\nconst Readme = ({ dataset }) => {\n  let hasReadme = dataset.readme !== null\n  if(hasReadme) hasReadme = dataset.readme.file.wordCount.words > 0;\n\n  if(hasReadme) {\n    return (\n      <Card className=\"w-100\">\n        <Card.Header>Read me</Card.Header>\n        <Card.Body>  \n          <Markdown source={dataset.readme.file.rawMarkdownBody} />\n        </Card.Body>\n      </Card>\n    )\n  } else {\n    return (\n      <Card bg=\"secondary\" text=\"light\" className=\"w-100 text-center\">\n        <Card.Header>No readme yet...</Card.Header>\n        <Card.Body>\n          <Card.Title>Contribute!</Card.Title>\n          <p>\n            This dataset has no readme yet, describing how to download or use the dataset. <br/> \n            Are you familiar with this dataset? \n            Please consider <a className=\"text-dark\">contributing</a>.\n          </p>\n          <Button variant=\"light\" href={`${dataset.github_directory}/README.md`}>Edit me on GitHub!</Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nfunction Issue({ issue }) {\n  return (\n    <>\n      <dt>{issue.title}</dt>\n      <dd><Markdown source={issue.description} /></dd>\n    </>\n  )\n}\n\nfunction Issues({ issues }) {\n  return (\n    <Card className=\"border-danger\" bg=\"light\">\n      <Card.Header>Issues</Card.Header>\n      <Card.Body>\n        <dl className=\"small\">\n          {issues.map(issue => <Issue issue={issue} key={issue.title} />)}\n        </dl>\n      </Card.Body>\n    </Card>\n  )\n}\n\nfunction Sources({ bibliography, ...opts }) {\n  return (\n    <Card>\n      <Card.Header>References</Card.Header>\n      <Card.Body>\n        <Bibliography bibliography={bibliography} {...opts} />\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default ({ data }) => {\n  const dataset = data.metadata\n\n  dataset.github_directory = `${data.site.siteMetadata.github}/tree/master/datasets/${dataset.dataset_id}`\n  dataset.raw_index_url = '#'\n  dataset.index = data.index\n  dataset.readme = data.readme\n\n  // Generate citation keys for all items\n  const bibtex = data.sources.nodes.map(node => node.content).join(\"\\n\")\n  const bibliography = new Cite(bibtex)\n  let sourceKeys = data.index.source_keys\n  sourceKeys.push(...dataset.dataset_citation_keys)\n  sourceKeys.push(...dataset.publication_citation_keys)\n  sourceKeys = _.uniq(sourceKeys)\n  const hasSources = (sourceKeys.length > 0 && sourceKeys !== [''])\n  const citations = {}\n  sourceKeys.forEach(key => {\n    let citation\n    try {\n      citation = bibliography.format('citation', {entry: key})\n    } catch (e) {\n      console.warn(`An error occured while formatting citation ${key}`, e)\n      citation = key\n    }\n    citations[key] = citation\n  })\n  const cited = bibliography.data.filter(entry => entry.id in citations)\n  bibliography.data = cited\n  \n  const showColumns = dataset.show_columns || []\n  \n  const indexColumns = React.useMemo(\n    () => [\n      {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ExpanderCell,\n        Filter: false,\n        Sort: false,\n      },\n      {\n        Header: 'ID',\n        accessor: 'id',\n        Cell: RowHeaderCell,\n        width: 50,\n      },\n      {\n        Header: 'Options',\n        accessor: row => {\n          const hasPreview = row.preview_url !== undefined;\n          const hasUrl = row.url !== undefined;\n          const hasCode = row.source_url !== undefined;\n          return `${hasPreview}${hasUrl}${hasCode}`\n        },\n        id: \"options\",\n        Cell: OptionsCell,\n        Filter: false,\n        width: 50,\n      },\n      {\n        Header: 'Num',\n        accessor: 'source_song_num',\n        width: 20,\n      },\n      {\n        Header: 'Title',\n        accessor: 'title',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={80} />,\n      },\n      {\n        Header: 'Source',\n        id: 'source',\n        accessor: (row) => {\n          if(!row.source_key) return null;\n          const citation = citations[row.source_key]\n          const pageNum = row.source_page_num\n          if(citation) {\n            return `${citation.slice(1, -1)}${ pageNum ? `, p. ${pageNum}` : ''}`\n          } else {\n            return `${row.source_key}${ pageNum ? `, p. ${pageNum}` : ''}`\n          }\n        },\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={25} />\n      },\n      {\n        Header: 'Location',\n        accessor: 'location',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Collectors',\n        accessor: 'collector',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Culture',\n        accessor: 'culture',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Language',\n        accessor: 'language',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Genre',\n        accessor: 'genres',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Meters',\n        accessor: 'meters',\n        Cell: ({cell}) => <TruncatedCell cell={cell} maxLength={30} />\n      },\n      {\n        Header: 'Key',\n        accessor: 'key',\n        width: 30\n      },\n      {\n        Header: 'Ambitus',\n        accessor: 'ambitus',\n        width: 30\n      },\n      {\n        Header: 'md5',\n        accessor: 'checksum',\n        Cell: ChecksumCell,\n        width: 20\n      }\n    ],\n    []\n  );\n  const indexData = React.useMemo(() => dataset.index.songs)\n\n  const hasIssues = dataset.issues !== null\n\n  return (\n    <Layout pageName={dataset.dataset_id}>\n      <Container>\n        <Row className=\"mt-5\">\n          <DatasetHeader dataset={dataset}/>\n        </Row>\n        <Row>\n          <CardDeck>\n            <DatasetPropsCard dataset={dataset} bibliography={bibliography} />\n            {/* <Technicalities dataset={dataset} /> */}\n            {hasIssues && <Issues issues={dataset.issues} />}\n          </CardDeck>\n        </Row>\n      </Container>\n      \n      <Container className=\"mt-5\">\n        <Row>\n        { dataset.index\n          ? <Index columns={indexColumns} data={indexData} showColumns={showColumns} bibliography={bibliography} />\n          : \"None\"\n        }\n        </Row>\n      </Container>\n\n      <Container className=\"mt-5\">\n        <Row className=\"mt-5\">\n          <Readme dataset={dataset} />\n        </Row>\n        <Row className=\"mt-5\">\n          <CardDeck className=\"w-100\">\n            {hasSources && <Sources bibliography={bibliography} twoColumns={true} />}\n          </CardDeck>\n        </Row>\n      </Container>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($dataset_id: String!) {\n    metadata: corpus(dataset_id: {eq: $dataset_id}) {\n      title\n      dataset_id\n      status\n      url\n      tags\n      description\n      num_entries\n      formats\n      authors {\n        name\n        role\n        url\n      }\n      contributors {\n        name\n        role\n        url\n      }\n      credits\n      dataset_citation_keys\n      publication_citation_keys\n      copyright\n      license {\n        unknown\n        name\n        text\n        abbreviation\n        url\n      }\n      show_columns\n      hide_columns\n      issues {\n        title\n        description\n      }\n    }\n    index: allIndexCsv(filter: {dataset_id: {eq: $dataset_id}}) {\n      songs: nodes {\n        id\n        title\n        title_translation\n        location\n        latitude\n        longitude\n        auto_geocoded\n        language\n        glottolog_id\n        culture\n        culture_dplace_id\n        culture_hraf_id\n        genres\n        performer: performers\n        performer_genders\n        instrumentation\n        instrument_use\n        percussion_use\n        voice_use\n        key: tonality\n        modality: scale\n        ambitus\n        tempo\n        meters\n        metric_classification\n        collector: collectors\n        collection_date\n        collection_date_earliest\n        collection_date_latest\n        source_key: publication_key\n        publication_type\n        publication_title\n        publication_authors\n        publication_date\n        source_page_num: publication_page_num\n        source_song_num: publication_song_num\n        tune_family_id\n        catalogue_num\n        source_url: publication_preview_url\n        encoder: encoders\n        encoding_date\n        contributors\n        copyright\n        license_id\n        path: file_path\n        file_format\n        version\n        checksum: file_checksum\n        url: file_url\n        preview_url: file_preview_url\n        has_lyrics: file_has_lyrics\n        has_music: file_has_music\n        file_has_licence\n        other_fields\n        comments\n        warnings\n        description\n        lyrics\n        lyrics_translation\n      }\n      source_keys: distinct(field: publication_key)\n    }\n    readme: file(relativeDirectory: {eq: $dataset_id}, name: {eq: \"README\"}) {\n      file: childMarkdownRemark{\n        rawMarkdownBody\n        wordCount {\n          words\n        }\n      }\n    }\n    sources: allRawCode {\n      nodes {\n        content\n      }\n    }\n    site {\n      siteMetadata {\n        github\n      }\n    }\n  }`","import React from \"react\"\nimport Badge from 'react-bootstrap/Badge';\n\nfunction TagPill({ children, ...props }) {\n  return <Badge pill {...props}>{children}</Badge>\n}\n\nfunction TagList({ tags, variant, ...props }) {\n  return (\n    <div {...props}>\n      {tags.map(tag => (\n        <TagPill variant={variant || \"light\"} className=\"mr-2\" key={tag}>{tag}</TagPill>\n      ))}\n    </div>\n  )\n}\n\nexport default TagList;"],"sourceRoot":""}